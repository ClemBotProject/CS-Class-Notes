Loose Coupling
	dont link services directly
		instead funnel through a common service (like a load balancer)

	Keep the sys accepting of change

	Do not fall into accidentall complexity	

	Loose coupling goes hand in hand with fault tolerance

Loose Coupling Strats
	Service oriented architecure
		Self contained unit of functionality
		implementation is irrelevant

		The OS, lang., and loc used by service are abstracted

	Microservices
		Split functionality
		Smaller components to iterate on
		Have a reduced test surface
		Benefit from lower risk from change
		Use of horizontally scalable parts

		Change components without breaking them
			the interface is a contract
			Modifying capability shouldnt effect consumers

		Use Simple API
			Lower cost of using service
			More complexity is resistance to change
			Less you share, less to break
			Allow you to hide details

	

Communicating between components
	Amazon Simple Queue service (SQS)
		managed message queuing service. Transmit any vol of messages at any level of throughput without loosing messages
		or requiring other services to be always available

	Message
		generated by a component, consumed by another

		can contain 256 KB of text in ANY format

	Amazon SQS
		supports multiple readers and writers on a qeueu

	Queues
		Repo for messages awaiting processing
		Acts as buffer between a sender and reciever

	SQS uses a FIFO queue OR Standard queue 

		FIFO (with EXACTLY ONCE processing)
		Duplicates not introduced
		300 send/recieve/delete per second

		Standard queue - look up (didnt have time to copy)

	Queue chain enables ASYNC processing


	SQS
		very scalable because its a managed service
		built in scalablilty/reliability by storing messages redundantly

		Simulread/write
		
		Secure - needs API credentials
	


Amazon SNS
	simple notif service

	Single published message
	no garanteed order
	no recall
	HTTP/HTTPS relay
	256KB mac per message

		